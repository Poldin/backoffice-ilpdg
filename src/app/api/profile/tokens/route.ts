import { NextRequest, NextResponse } from "next/server"
import { getSupabaseServer } from "@/app/lib/supabase/server"

export async function GET() {
  try {
    const supabase = await getSupabaseServer()
    const { data: userData, error: userError } = await supabase.auth.getUser()
    if (userError || !userData.user) {
      return NextResponse.json({ error: "Non autenticato" }, { status: 401 })
    }

    const { data: profile, error: profileError } = await supabase
      .from("profile")
      .select("id")
      .eq("user_id", userData.user.id)
      .single()

    if (profileError || !profile) {
      return NextResponse.json({ error: "Profilo non trovato" }, { status: 404 })
    }

    const { data, error } = await supabase
      .from("profile_token")
      .select("id, created_at, nome")
      .eq("profile_id", profile.id)
      .order("created_at", { ascending: false })

    if (error) {
      return NextResponse.json({ error: error.message }, { status: 400 })
    }

    return NextResponse.json(data || [])
  } catch {
    return NextResponse.json({ error: "Errore interno del server" }, { status: 500 })
  }
}

export async function POST(req: NextRequest) {
  try {
    const supabase = await getSupabaseServer()
    const { data: userData, error: userError } = await supabase.auth.getUser()
    if (userError || !userData.user) {
      return NextResponse.json({ error: "Non autenticato" }, { status: 401 })
    }

    const body = await req.json().catch(() => ({}))
    const nome = (body?.nome ?? "").toString().trim()
    if (!nome) {
      return NextResponse.json({ error: "Il nome Ã¨ obbligatorio" }, { status: 400 })
    }

    const { data: profile, error: profileError } = await supabase
      .from("profile")
      .select("id")
      .eq("user_id", userData.user.id)
      .single()

    if (profileError || !profile) {
      return NextResponse.json({ error: "Profilo non trovato" }, { status: 404 })
    }

    // Create token (token is generated by DB default gen_random_uuid())
    const { data, error } = await supabase
      .from("profile_token")
      .insert({ profile_id: profile.id, nome })
      .select("id, created_at, nome, token")
      .single()

    if (error) {
      return NextResponse.json({ error: error.message }, { status: 400 })
    }

    // Return token ONLY at creation time
    return NextResponse.json(data)
  } catch {
    return NextResponse.json({ error: "Errore interno del server" }, { status: 500 })
  }
}


